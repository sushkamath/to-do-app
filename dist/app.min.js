'use strict';

var ngToDo = angular.module('ngToDo', ['toDoFilters', 'toDoDirectives']).config(function () {}).run(['$rootScope', '$window', function ($rootScope, $window) {
	console.log('App running.!');
}]);
angular.module('toDoFilters', []).filter('altCaps', function () {
	return function (input) {
		var charArray = input.split('');
		charArray = charArray.map(function (char, index) {
			return index % 2 === 0 ? char.toUpperCase(char) : char.toLowerCase(char);
		});
		return charArray.join('');
	};
});
angular.module('toDoDirectives', []).directive('completeColor', function () {
	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			scope.$watch(attrs.completeColor, function (value) {
				element.css('color', value ? 'blue' : 'limegreen');
			});
		}
	};
});

ngToDo.controller('toDoCtrl', ['$rootScope', '$scope', 'altCapsFilter', function ($rootScope, $scope, altCapsFilter) {

	$scope.todos = [{ isComplete: false, val: 'My first todo.' }, { isComplete: true, val: 'My other todo.' }, { isComplete: false, val: 'Make your todo.' }, { isComplete: true, val: 'Try this todo.' }, { isComplete: false, val: 'Hello ToDo.' }];

	$scope.isDisabled = false;

	$scope.checkCompleteState = function () {
		$scope.isDisabled = !$scope.isDisabled;
	};

	$scope.addNewTask = function () {
		console.log("Adding new task");
		$scope.todos.unshift({ isComplete: false, val: altCapsFilter($scope.newTask) });
		$scope.newTask = '';
	};

	$scope.removeCompleted = function () {
		console.log("Clearing completed tasks.");
		$scope.todos = $scope.todos.filter(function (todo) {
			return !todo.isComplete;
		});
		$scope.isDisabled = true;
	};

	$scope.deleteToDo = function (index) {
		console.log("Deleting this task.");
		$scope.todos.splice(index, 1);
	};
}]);
//# sourceMappingURL=app.js.map
//# sourceMappingURL=app.min.js.map
